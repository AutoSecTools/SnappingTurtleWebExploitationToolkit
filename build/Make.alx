#'Config';
load System.IO.Compression.FileSystem;
using System;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Diagnostics;
using System.Text.RegularExpressions;

testCmds = [
    '..\\st.py lfi "http://localhost/test.php" -g theme $lfi',
    '..\\st.py lfi "http://localhost/test.php" --g {\'theme\':\'$lfi\'}',
    '..\\st.py lfi "http://localhost/postTest.php" -p theme $lfi',
    '..\\st.py lfi "http://localhost/postTest.php" --p {\'theme\':\'$lfi\'}',
    '..\\st.py sqli list "http://localhost/insecure/SQL-Injection/sql-injection-get.php" -g email $sqli',
    '..\\st.py sqli table sqlitest.users "http://localhost/insecure/SQL-Injection/sql-injection-get.php" -g email $sqli',
];

Directory.SetCurrentDirectory('..\\src');
args = Environment.GetCommandLineArgs();
print = Console.WriteLine;
clear = Console.Clear;
count = Enumerable.Count;

exec = @(cmd) {
    si = new ProcessStartInfo('cmd', '/c ' + cmd);
    si.UseShellExecute = false;    
    Process.Start(si).WaitForExit();
};

pause = @{
    print('Press any key to continue...');
    Console.ReadKey();
};

exists = File.Exists;
remove = File.Delete;

execPy = @(args) exec(python + ' ' + args);
compile = @(args) exec(compiler + ' ' + args);

deploySt = @{
    src = stPyFile;
    dst = stReleasePyFile;
    print("Copying '{0}' to '{1}'", src, dst);
    File.Copy(src, dst, true);
    File.Delete(src);
};

compileSt = @{
    print('Compiling SnappingTurtle\r\n');
    compile(stFile);
    print("");
    
    if (exists(stPyFile)) {
        deploySt();
    }
};

getVersion = @()
    stReleasePyFile
    |> File.ReadAllText
    @(t) Regex.Match(t, 'Tool (.*?)"\\s*\\+\\s*"(.*?)"')
    @(m) Regex.Replace(m.Value, '(Tool\\s*)|(".*?")|"', '');
    
createArchive = @{
    print('Archiving release');
    version = getVersion();
    print('SnappingTurtle version: {0}', version);
    
    if (!Directory.Exists(archiveDir)) {
        print("Creating directory: '{0}'", archiveDir);
        Directory.CreateDirectory(archiveDir);
    }
    
    archive = String.Format('{0}\\SnappingTurtle_{1}.zip', archiveDir, version);

    if (File.Exists(archive)) {
        print('Deleting existing archive: {0}', archive);
        File.Delete(archive);
    }

    print('Creating zip');
    Directory.CreateDirectory(tmpDir);
    File.Copy(stReleasePyFile, tmpDir + '\\st.py', true);
    File.Copy(root + 'README.md', tmpDir + '\\README.md', true);
    ZipFile.CreateFromDirectory(tmpDir, archive, CompressionLevel.Optimal, false);
    print('Zip created: {0}', archive);
    print('Deleting: {0}', tmpDir);
    Directory.Delete(tmpDir, true);
};

loop = @(f) {
    while (true) {
        print('Running test');
        
        if (exists(stPyFile)) {
            print("Deleting '{0}'", stPyFile);
            remove(stPyFile);
        }

        compileSt();
        
        if (exists(stReleasePyFile)) {
            print('Compilation successful, running test');
            f();
        } else {
            print('Compilation failed');
        }
        
        pause();
        clear();    
    }
};

printDirections = @{
    print("aphid build.alx [options]\r\n");
    print("Options:\r\n");
    print("  -b     build STWET");
    print("  -t     build and test STWET");
};

if(args.Length < 3) {
    printDirections();    
    ret 2;
}

opt = args[2];
isBuild = opt == '-b';
isTest = opt == '-t';

if (!isBuild && !isTest) {
    print("Invalid opt: {0}", opt);
    ret 3;
}

if (isBuild) {    
    compileSt();
    createArchive();
    print('\r\nDone');
} else {
    if (args.Length < 4) {
        print("Missing test number. Tests:\r\n");
        i = 0;
        for (c in testCmds) print("  {0}: {1}", i++, c);
        
        ret 4;
    }
    
    testIndex = args[3];
    if (testIndex >= (testCmds |> count)) {
        print("Invalid test number: {0}.", testIndex);
        ret 5;
    }
    
    c = testCmds[testIndex];
    
    loop(@{
        print("Running command: {0}", c);
        execPy(c)
    });
}
