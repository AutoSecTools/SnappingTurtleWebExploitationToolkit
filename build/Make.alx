#'Config';
using System;
using System.IO;
using System.Diagnostics;

Directory.SetCurrentDirectory('..\\src');
args = Environment.GetCommandLineArgs();
print = Console.WriteLine;
clear = Console.Clear;

exec = @(cmd) {
    si = new ProcessStartInfo('cmd', '/c ' + cmd);
    si.UseShellExecute = false;    
    Process.Start(si).WaitForExit();
};

pause = @{
    print('Press any key to continue...');
    Console.ReadKey();
};

exists = File.Exists;
remove = File.Delete;


execPy = @(file) exec(python + ' ' + file);
compile = @(file) exec(compiler + ' ' + file);

compileSt = @{
    print('Compiling SnappingTurtle\r\n');
    compile(stFile);
    print("");
};

deploySt = @{
    src = stPyFile;
    dst = '..\\st.py';
    print("Copying '{0}' to '{1}'", src, dst);
    File.Copy(src, dst, true);
};

loop = @(f) {
    while (true) {
        print('Running test');    
        if (exists(stPyFile)) {
            print("Deleting '{0}'", stPyFile);
            remove(stPyFile);
        }

        compileSt();
        
        if (exists(stPyFile)) {
            print('Compilation successful');
            f();
        } else {
            print('Compilation failed');
        }
        
        pause();
        clear();    
    }
};

printDirections = @{
    print("aphid build.alx [options]\r\n");
    print("Options:\r\n");
    print("  -b     build STWET");
    print("  -t     build and test STWET");
};

if(args.Length != 3) {
    printDirections();    
    ret 2;
}

opt = args[2];
isBuild = opt == '-b';
isTest = opt == '-t';

if (!isBuild && !isTest) {
    print("Invalid opt: {0}", opt);
    ret 3;
}

if (isBuild) {
    compileSt();
    deploySt();
    print('\r\nDone');
} else {
}
