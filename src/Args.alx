import('sys');
from('ast', 'literal_eval');

class CliArgs {
    Mode: null,
    ModeOption: null,
    ModeOption2: null,
    Get: null,
    Post: null,
};

class ParserState {
    Class: 0,
    Url: 1,
    Option: 2,
    OptionValue: 3,
    OptionValue2: 4,
    ModeOption: 5,
    ModeOption2: 6,
};

class ArgOption {
    Get: '-g',
    Post: '-p',
    GetPair: '--g',
    PostPair: '--p', 
};

class ClassOption {
    Lfi: 'lfi',
    Sqli: 'sqli',
};

class SqliOption {
    List: 'list',
    Table: 'table',
};

__dict = macro(@(__d) {
    if (__d == null) {
        __d = dict();
    }
    d = __d;
});

parseArgs = @{
    i = 0;
    key = null;
    key2 = null;
    state = ParserState.Class;
    obj = CliArgs();
    
    for (x in sys.argv @skip(1)) {
        switch (state) {
            ParserState.Class: {
                obj.Mode = x;
                
                switch (x) {
                    ClassOption.Sqli: state = ParserState.ModeOption;
                    default: state = ParserState.Url;
                }
            }
            ParserState.ModeOption: {
                obj.ModeOption = x;
                
                if (obj.Mode == ClassOption.Sqli &&
                    obj.ModeOption == SqliOption.Table) {
                    state = ParserState.ModeOption2;
                } else {
                    state = ParserState.Url;
                }
            }
            ParserState.ModeOption2: {
                obj.ModeOption2 = x;
                state = ParserState.Url;
            }
            ParserState.Url: {
                obj.Url = x;
                state = ParserState.Option;
            }
            ParserState.Option: {
                key = x;
                state = ParserState.OptionValue;
            }
            ParserState.OptionValue: {
                switch (key) {
                    ArgOption.Get: {
                        obj.Get = literal_eval(x);
                        state = ParserState.Option;
                    }
                    ArgOption.Post: {
                        obj.Post = literal_eval(x);
                        state = ParserState.Option;
                    }
                    ArgOption.GetPair, ArgOption.PostPair: {
                        key2 = x;
                        state = ParserState.OptionValue2;
                    }
                }
            }
            ParserState.OptionValue2: {
                d = null;
                switch (key) {
                    ArgOption.GetPair: __dict(obj.Get);
                    ArgOption.PostPair: __dict(obj.Post);
                }
                d[key2] = x;                
                state = ParserState.Option;
            }            
            default: {
                print('Error parsing argument: %s' % x);
                quit();
            }
        }
        
        i++;
    }
    
    ret obj;    
};

hasArgs = sys.argv |> len @> 1;
args = parseArgs();