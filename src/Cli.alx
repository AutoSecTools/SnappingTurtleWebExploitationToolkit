import('json');

class ShellCommand {
    Quit: 'quit',
};

shellLoop = @(shell) {
    while (true) {
        cmd = raw_input('st>');
        
        switch (cmd) {
            ShellCommand.Quit: {
                print('Exiting');
                quit();
            }
            default: cmd |> shell.run |> print;
        }
    }
};

printTable = @(columns, rows) {
    rows = [columns] + [columns @select(@(x) '')] + rows;
    
    colLens = range(0, len(columns))
        @select(@(x) rows @select(@(y) x < len(y) ? y[x] |> len : 0))
        @select(@(x) sorted(x, reverse = true)[0] + 1);    
    
    for (row in rows) {
        i = 0;
        for (col in row) {
            maxLen = colLens[i];
            pad = maxLen - len(col);
            sys.stdout.write(col + (' ' * (pad + 1)));
            i++;
        }
        sys.stdout.write('\r\n');
    }
    sys.stdout.write('\r\n');
};

listTables = @(tmpl) {
    probe = SqlUnionProbe(tmpl);
    di = probe.listSchemas();
    
    if (di == null)
    {
        print('[X] List tables failed\r\n');
        
        ret null;
    }
    
    keys = di.keys();
    print('[+] %s databases found\r\n' % (keys |> len));
    for (key in keys) {
        print('    ' + key);
        for (table in di[key])
            print('      ' + table);
        print('');
    }
};

