import('string');

__tmpl = macro(@(__template, __values) {
    __template != null && __values != null ?
        string.Template(__template).substitute(__values) :
    __template != null ? 
        __template :
        ''
});

class init HttpRequestTemplate {
    encode: true,
    
    __init__: @(url, query = null, post = null, file = null) { },
    
    getUrl: @(values) {
        s = __tmpl(self.url, values);
        ret self.hasQuery() ? s + '?' + self.getQuery(values) : s;
    },
        
    hasQuery: @() self.query != null && len(self.query) != 0,
    getQuery: @(values) self.__getData(self.query, values),
    getPost: @(values) self.__getData(self.post, values),
    
    getFile: @(values)
        self.file == null ? 
            null :
            self.file 
                @select(@(x) HttpFile(
                    __tmpl(x.name, values),
                    __tmpl(x.filename, values),
                    __tmpl(x.data, values),
                    __tmpl(x.type, values))),
    
    __getData: @(data, values) {
        if (data == null) ret null;        
        result = dict();        
        for (k in data) result[__tmpl(k, values)] = __tmpl(data[k], values);        
        
        ret self.encode ? 
            result |> urllib.urlencode :
            result;
    },
};