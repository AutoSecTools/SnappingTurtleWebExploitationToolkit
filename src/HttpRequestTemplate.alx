import('string');

__tmpl = macro(@(__template, __values) {
    string.Template(__template).substitute(__values)
});

class init HttpRequestTemplate {
    url: null,
    query: null,
    post: null,
    encode: true,
    
    __init__: @(url, query = null, post = null) { },
    
    getUrl: @(values) {
        s = __tmpl(self.url, values);
        ret self.hasQuery() ? s + '?' + self.getQuery(values) : s;
    },
        
    hasQuery: @() self.query != null && len(self.query) != 0,
    getQuery: @(values) self.__getData(self.query, values),
    getPost: @(values) self.__getData(self.post, values),
    
    __getData: @(data, values) {
        if (data == null) ret null;        
        result = dict();        
        for (k in data) result[__tmpl(k, values)] = __tmpl(data[k], values);        
        
        ret self.encode ? 
            result |> urllib.urlencode :
            result;
    },
};