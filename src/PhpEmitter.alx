from('random', 'choice', 'randint');

class PhpEmitter {
    varNames: [],
    chr: 'chr',
    min: -2147483648,
    max: 2147483647,
    doc: @(body) '<?php %s ?>' % body,
    stmt: @(exp) exp + ';',

	declStmt: @(value) {
        n = self.nextVar();
        ret n, self.assignStmt(n, value);
	},

    assignStmt: @(var, value) self.stmt('{}={}'.format(var, value)),
	arrayAccess: @(array, dim)  '{}[{}]'.format(array, dim),
    callStmt: @(target, args) args @self.call(target) |> self.stmt,
    call: @(target, args) '{}({})'.format(target, args),	

    string: @(string, allowPassthru = true, allowChars = true) {
        funcs = [self.splitString];
        if (allowChars) funcs.append(self.chars);
        ret choice(funcs)(string);
	},

    echo: @(value) self.stmt('echo %s' % value),

    splitString: @(string) {
        l = len(string);
        if (l < 2) ret self.string(string);
        i = randint(1, l - 1);
        lhs = self.string(string[__emit('0:i')]);
        rhs = self.string(string[__emit('i:l')]);
        ret lhs + '.' + rhs;
	},

    chars: @(str) str @select(self.char) @join('.'),

    char: @(char) {
        c = ord(char);
        n = choice([c, self.widenByte(c)]);
        ret '{}({})'.format(self.chr, self.number(n));
	},

    number: @(number)
		number
		|> choice([self.emit, self.addition, self.subtraction]),

    addition: @(number) self.binOp(number, '+', @(x, y) x - y),
    subtraction: @(number) self.binOp(number, '-', @(x, y) x + y),

    binOp: @(number, op, func) {
        while(true) {
            x = self.nextInt();
            lhs = func(number, x);
            if (self.validNum(x) && self.validNum(lhs)) break;
		}
        rhs = self.number(x);
        fmt = op == str(rhs)[__emit(':1')] ? '({}{} {})' : '({}{}{})';
        ret fmt.format(lhs, op, rhs);
	},

    emit: @(value) value,

    nextInt: @() 
		choice([0, 8, 16, 32] @select(@(x) randint(self.min >> x, self.max >> x))),

    nextVar: @() {
        l = randint(1, 1);
        while (true) {
			v = '$' + (range(0, l) @select(@(x) self.getRandChar()) |> addAll);
			            
            if (!self.varNames.__contains__(v)) {
                self.varNames.append(v);
                ret v;
			}
		}
	},

    quote: @(string) '"%s"' % self.escape(string),
    getRandChar: @() self.getAllChars() |> choice,
    getAllChars: @() self.getChars('a') + self.getChars('A') + '_',
    getChars: @(start) range(0, 26) @select(@(x) ord(start) + x |> chr) |> addAll,
    escape: @(string) string.replace('\\', '\\\\').replace('"', '\\"'),

    widenByte: @(number) {
        mask = self.max & ~0xff;
        while (true) {
            x = (self.nextInt() & mask) | number;
            if (self.validNum(x)) ret x;
		}
	},

    validNum: @(number) self.min <= number && number <= self.max,
};